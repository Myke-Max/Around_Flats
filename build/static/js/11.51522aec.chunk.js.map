{"version":3,"sources":["components/Auth/Password Input/index.tsx","validationSchema/registrationSchema.tsx","components/Auth/SignUpScreen/index.tsx"],"names":["PasswordInput","id","name","label","value","handleChange","handleBlur","touchedPassword","errorPassword","useState","showPassword","setShowPassword","sx","mb","fullWidth","InputProps","endAdornment","position","aria-label","onClick","onMouseDown","color","type","onChange","onBlur","error","Boolean","helperText","required","fullNameRegExp","RegExp","registrationSchema","Yup","shape","fullName","matches","email","password","min","confirmPassword","oneOf","SignUpScreen","setLoad","setAlert","useContext","UIContext","formik","useFormik","initialValues","validationSchema","onSubmit","a","resetForm","firebase","auth","createUserWithEmailAndPassword","userCredential","user","updateProfile","displayName","show","severity","message","Error","Grid","container","Box","textAlign","width","Typography","gutterBottom","variant","handleSubmit","TextField","values","touched","errors","item","xs","Button","disabled","isValid","dirty","mt","Link","component","RouterLink","to"],"mappings":"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","file":"static/js/11.51522aec.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TextField, InputAdornment, IconButton } from '@mui/material/';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\n\ninterface InputProps {\n  id: string;\n  name: string;\n  label: string;\n  value: string;\n  handleChange: (e: React.ChangeEvent) => void;\n  handleBlur: (e: React.FocusEvent) => void;\n  touchedPassword: boolean | undefined;\n  errorPassword: string | undefined;\n}\n\nconst PasswordInput: React.FC<InputProps> = ({\n  id,\n  name,\n  label,\n  value,\n  handleChange,\n  handleBlur,\n  touchedPassword,\n  errorPassword,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\n  const handleMouseDownPassword = () => setShowPassword(!showPassword);\n  return (\n    <>\n      <TextField\n        sx={{ mb: 6 }}\n        fullWidth\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton\n                aria-label=\"toggle password visibility\"\n                onClick={handleClickShowPassword}\n                onMouseDown={handleMouseDownPassword}\n              >\n                {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n        color=\"warning\"\n        id={id}\n        name={name}\n        label={label}\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={touchedPassword && Boolean(errorPassword)}\n        helperText={touchedPassword && errorPassword}\n        required\n      />\n    </>\n  );\n};\n\nexport default PasswordInput;\n","import * as Yup from 'yup';\n\nconst fullNameRegExp = new RegExp(\"([A-Z][a-z-']{1,50})|([А-Я][а-я-']{1,50})\");\nconst registrationSchema = Yup.object().shape({\n  fullName: Yup.string()\n    .required('Full Name is required field')\n    .matches(\n      fullNameRegExp,\n      'Full Name field has to contain at least 2 words, each of which has to start from a capital letter',\n    ),\n  email: Yup.string()\n    .email('Email is invalid,please try again')\n    .required('Email address is required'),\n  password: Yup.string()\n    .min(12, 'Password must be 12 characters or more ')\n    .required('Password is required'),\n  confirmPassword: Yup.string()\n    .oneOf([Yup.ref('password')], 'Passwords must match')\n    .required('Password confirmation is required'),\n});\n\nexport default registrationSchema;\n","import React, { useContext, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// FIREBASE\nimport firebase from 'firebase';\n// MATERIAL UI\nimport { Link, TextField, Typography, Box, Button, Grid } from '@mui/material/';\n// FORMIK\nimport { useFormik } from 'formik';\nimport registrationSchema from '../../../validationSchema/registrationSchema';\nimport { UIContext } from '../../Unknown/UIContext';\nimport PasswordInput from '../Password Input';\n\nconst SignUpScreen: React.FC = () => {\n  const [load, setLoad] = useState(false);\n  const { setAlert } = useContext(UIContext);\n\n  const formik = useFormik({\n    initialValues: {\n      fullName: '',\n      email: '',\n      password: '',\n      confirmPassword: '',\n    },\n    validationSchema: registrationSchema,\n\n    onSubmit: async ({ email, password, fullName }, { resetForm }) => {\n      setLoad(true);\n      try {\n        const userCredential = await firebase\n          .auth()\n          .createUserWithEmailAndPassword(email, password);\n        const { user } = userCredential;\n\n        await user?.updateProfile({ displayName: fullName });\n        setAlert({\n          show: true,\n          severity: 'success',\n          message: `Welcome on board 🚀`,\n        });\n        setLoad(false);\n        resetForm();\n      } catch (error) {\n        let message;\n        if (error instanceof Error) {\n          message = error.message;\n          setAlert({\n            show: true,\n            severity: 'error',\n            message,\n          });\n        }\n      }\n    },\n  });\n\n  return (\n    <Grid container>\n      <Box textAlign=\"center\" width=\"100%\">\n        <Typography color=\"common.black\" gutterBottom variant=\"h1\">\n          Register\n        </Typography>\n      </Box>\n\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          sx={{ mb: 6 }}\n          fullWidth\n          color=\"warning\"\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onBlur={formik.handleBlur}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n          required\n        />\n        <TextField\n          sx={{ mb: 6 }}\n          fullWidth\n          color=\"warning\"\n          id=\"fullName\"\n          name=\"fullName\"\n          label=\"Full Name\"\n          value={formik.values.fullName}\n          onBlur={formik.handleBlur}\n          onChange={formik.handleChange}\n          error={formik.touched.fullName && Boolean(formik.errors.fullName)}\n          helperText={formik.touched.fullName && formik.errors.fullName}\n          required\n        />\n        <PasswordInput\n          id=\"password\"\n          name=\"password\"\n          label=\"Password\"\n          value={formik.values.password}\n          handleChange={formik.handleChange}\n          handleBlur={formik.handleBlur}\n          touchedPassword={formik.touched.password}\n          errorPassword={formik.errors.password}\n        />\n        <PasswordInput\n          id=\"confirmPassword\"\n          name=\"confirmPassword\"\n          label=\"Confirm password\"\n          value={formik.values.confirmPassword}\n          handleChange={formik.handleChange}\n          handleBlur={formik.handleBlur}\n          touchedPassword={formik.touched.confirmPassword}\n          errorPassword={formik.errors.confirmPassword}\n        />\n        <Grid item xs={12}>\n          <Button\n            disabled={!(formik.isValid && formik.dirty)}\n            fullWidth\n            type=\"submit\"\n            color=\"secondary\"\n          >\n            Sign up\n          </Button>\n        </Grid>\n        <Grid sx={{ mt: 10 }}>\n          <Typography color=\"common.black\" variant=\"h4\">\n            Already have account?\n          </Typography>\n          <Link color=\"primary\" component={RouterLink} to=\"/login\">\n            Sing in\n          </Link>\n        </Grid>\n      </form>\n    </Grid>\n  );\n};\n\nexport default SignUpScreen;\n"],"sourceRoot":""}