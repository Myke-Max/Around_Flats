{"version":3,"sources":["components/Auth/Password Input/index.tsx","validationSchema/loginSchema.tsx","components/Auth/SignInScreen/index.tsx"],"names":["PasswordInput","id","name","label","value","handleChange","handleBlur","touchedPassword","errorPassword","useState","showPassword","setShowPassword","sx","mb","fullWidth","InputProps","endAdornment","position","aria-label","onClick","onMouseDown","color","type","onChange","onBlur","error","Boolean","helperText","required","loginSchema","Yup","shape","email","password","min","max","SignInScreen","setAlert","useContext","UIContext","load","setLoad","formik","useFormik","initialValues","validationSchema","onSubmit","a","firebase","auth","signInWithEmailAndPassword","userCredential","user","show","severity","message","Error","Grid","container","Box","textAlign","width","Typography","gutterBottom","variant","handleSubmit","TextField","margin","values","touched","errors","item","xs","Button","disabled","isValid","dirty","mt","Link","component","RouterLink","to"],"mappings":"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","file":"static/js/10.84291571.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport { TextField, InputAdornment, IconButton } from '@mui/material/';\nimport VisibilityIcon from '@mui/icons-material/Visibility';\nimport VisibilityOffIcon from '@mui/icons-material/VisibilityOff';\n\ninterface InputProps {\n  id: string;\n  name: string;\n  label: string;\n  value: string;\n  handleChange: (e: React.ChangeEvent) => void;\n  handleBlur: (e: React.FocusEvent) => void;\n  touchedPassword: boolean | undefined;\n  errorPassword: string | undefined;\n}\n\nconst PasswordInput: React.FC<InputProps> = ({\n  id,\n  name,\n  label,\n  value,\n  handleChange,\n  handleBlur,\n  touchedPassword,\n  errorPassword,\n}) => {\n  const [showPassword, setShowPassword] = useState(false);\n  const handleClickShowPassword = () => setShowPassword(!showPassword);\n  const handleMouseDownPassword = () => setShowPassword(!showPassword);\n  return (\n    <>\n      <TextField\n        sx={{ mb: 6 }}\n        fullWidth\n        InputProps={{\n          endAdornment: (\n            <InputAdornment position=\"end\">\n              <IconButton\n                aria-label=\"toggle password visibility\"\n                onClick={handleClickShowPassword}\n                onMouseDown={handleMouseDownPassword}\n              >\n                {showPassword ? <VisibilityIcon /> : <VisibilityOffIcon />}\n              </IconButton>\n            </InputAdornment>\n          ),\n        }}\n        color=\"warning\"\n        id={id}\n        name={name}\n        label={label}\n        type={showPassword ? 'text' : 'password'}\n        value={value}\n        onChange={handleChange}\n        onBlur={handleBlur}\n        error={touchedPassword && Boolean(errorPassword)}\n        helperText={touchedPassword && errorPassword}\n        required\n      />\n    </>\n  );\n};\n\nexport default PasswordInput;\n","import * as Yup from 'yup';\n\nconst loginSchema = Yup.object().shape({\n  email: Yup.string()\n    .email('Email is not valid, please try again')\n    .required('Email address is required'),\n  password: Yup.string()\n    .min(12, 'The password must be 12 or more characters.')\n    .max(20, 'Password must be no more than 20 characters')\n    .required('Password is required'),\n});\n\nexport default loginSchema;\n","import React, { useContext, useState } from 'react';\nimport { Link as RouterLink } from 'react-router-dom';\n// FIREBASE\nimport firebase from 'firebase';\n\n// MATERIAL UI\nimport Grid from '@mui/material/Grid';\nimport Button from '@mui/material/Button';\nimport Box from '@mui/material/Box';\nimport { Link, TextField, Typography } from '@mui/material/';\n\n// FORMIK\nimport { useFormik } from 'formik';\nimport loginSchema from '../../../validationSchema/loginSchema';\nimport { UIContext } from '../../Unknown/UIContext';\nimport PasswordInput from '../Password Input';\n\nconst SignInScreen: React.FC = () => {\n  const { setAlert } = useContext(UIContext);\n  const [load, setLoad] = useState(false);\n\n  const formik = useFormik({\n    initialValues: {\n      email: '',\n      password: '',\n    },\n    validationSchema: loginSchema,\n\n    onSubmit: async ({ email, password }) => {\n      try {\n        setLoad(true);\n        const userCredential = await firebase\n          .auth()\n          .signInWithEmailAndPassword(email, password);\n        setLoad(false);\n        const { user } = userCredential;\n        setAlert({\n          show: true,\n          severity: 'success',\n          message: `Login Success with ${user?.email}`,\n        });\n      } catch (error) {\n        let message;\n        if (error instanceof Error) message = error.message;\n        setAlert({\n          show: true,\n          severity: 'error',\n          message,\n        });\n      }\n    },\n  });\n\n  return (\n    <Grid container>\n      <Box textAlign=\"center\" width=\"100%\">\n        <Typography color=\"common.black\" gutterBottom variant=\"h1\">\n          Login\n        </Typography>\n      </Box>\n      <form onSubmit={formik.handleSubmit}>\n        <TextField\n          sx={{ mb: 6 }}\n          fullWidth\n          margin=\"normal\"\n          color=\"warning\"\n          id=\"email\"\n          name=\"email\"\n          label=\"Email\"\n          value={formik.values.email}\n          onBlur={formik.handleBlur}\n          onChange={formik.handleChange}\n          error={formik.touched.email && Boolean(formik.errors.email)}\n          helperText={formik.touched.email && formik.errors.email}\n          required\n        />\n        <PasswordInput\n          id=\"password\"\n          name=\"password\"\n          label=\"password\"\n          value={formik.values.password}\n          handleChange={formik.handleChange}\n          handleBlur={formik.handleBlur}\n          touchedPassword={formik.touched.password}\n          errorPassword={formik.errors.password}\n        />\n        <Grid item xs={12}>\n          <Button\n            disabled={!(formik.isValid && formik.dirty) || load}\n            fullWidth\n            type=\"submit\"\n            color=\"secondary\"\n          >\n            Sign in\n          </Button>\n        </Grid>\n        <Grid sx={{ mt: 30 }}>\n          <Typography color=\"common.black\" variant=\"h4\">\n            Donâ€™t have an account?\n          </Typography>\n          <Link color=\"primary\" component={RouterLink} to=\"/registration\">\n            Register\n          </Link>\n        </Grid>\n      </form>\n    </Grid>\n  );\n};\n\nexport default SignInScreen;\n"],"sourceRoot":""}